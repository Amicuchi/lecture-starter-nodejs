import { userRepository } from "../repositories/userRepository.js";

class UserService {

  getAll() {
    const users = userRepository.getAll();
    if (!users || users.length === 0) {
      // Consider if throwing an error or returning empty array is better
      // For now, returning empty array as per typical GET all behavior
      return [];
    }
    return users;
  }

  getById(id) {
    const user = userRepository.getOne({ id });
    if (!user) {
      return null; // Service layer can return null, controller/middleware handles 404
    }
    return user;
  }

  create(data) {
    // Validation for email and phone uniqueness should be here or in repository
    // For now, assuming repository handles it or it's a separate validation step
    const existingUserByEmail = userRepository.getOne({ email: data.email });
    if (existingUserByEmail) {
      throw new Error("User with this email already exists.");
    }
    const existingUserByPhone = userRepository.getOne({ phone: data.phone });
    if (existingUserByPhone) {
      throw new Error("User with this phone number already exists.");
    }
    // ID is auto-generated by the repository usually
    const newUser = userRepository.create(data);
    return newUser;
  }

  update(id, dataToUpdate) {
    const user = userRepository.getOne({ id });
    if (!user) {
      return null; // Or throw error, to be handled by response middleware
    }
    // Check for email/phone uniqueness if they are being updated
    if (dataToUpdate.email && dataToUpdate.email !== user.email) {
      const existingUserByEmail = userRepository.getOne({ email: dataToUpdate.email });
      if (existingUserByEmail) {
        throw new Error("User with this email already exists.");
      }
    }
    if (dataToUpdate.phone && dataToUpdate.phone !== user.phone) {
      const existingUserByPhone = userRepository.getOne({ phone: dataToUpdate.phone });
      if (existingUserByPhone) {
        throw new Error("User with this phone number already exists.");
      }
    }
    const updatedUser = userRepository.update(id, dataToUpdate);
    return updatedUser;
  }

  delete(id) {
    const user = userRepository.getOne({ id });
    if (!user) {
      // Depending on desired behavior, could throw an error or return false
      // Throwing error is often better for services to indicate failure clearly
      throw new Error("User not found."); 
    }
    userRepository.delete(id);
    return { message: "User deleted successfully" }; // Or simply return true/void
  }

  search(search) {
    const item = userRepository.getOne(search);
    if (!item) {
      return null;
    }
    return item;
  }
}

const userService = new UserService();

export { userService };
